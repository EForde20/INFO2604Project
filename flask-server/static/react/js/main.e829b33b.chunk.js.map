{"version":3,"sources":["components/SideLayout.js","App.js","serviceWorker.js","index.js"],"names":["headerStyles","padding","fontSize","height","background","color","whiteSpace","overflow","iconStyles","width","lineHeight","textAlign","NavToggle","expand","onChange","Navbar","appearance","className","Body","Nav","Dropdown","placement","trigger","renderTitle","children","Icon","style","icon","Item","pullRight","onClick","Side","props","state","handleToggle","bind","this","setState","Container","Sidebar","display","flexDirection","collapsible","Sidenav","Header","size","verticalAlign","marginLeft","expanded","defaultOpenKeys","eventKey","active","title","Content","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"js/main.e829b33b.chunk.js","sourcesContent":["import 'rsuite/dist/styles/rsuite-default.css';\n//import { Button } from 'rsuite';  \nimport { Container, Header, Content, Footer, Sidebar, Navbar, Nav, Sidenav, Icon, Dropdown } from 'rsuite';   \nimport React, {Component} from 'react'; \n//import { Button, Navbar, Nav, Sidenav, Icon, Dropdown, } from 'react-bootstrap'\n\nconst headerStyles = {\n  padding: 18,\n  fontSize: 16,\n  height: 56,\n  background: '#34c3ff',\n  color: ' #fff',\n  whiteSpace: 'nowrap',\n  overflow: 'hidden'\n};\n\nconst iconStyles = {\n  width: 56,\n  height: 56,\n  lineHeight: '56px',\n  textAlign: 'center'\n};\n\nconst NavToggle = ({ expand, onChange }) => {\n  return (\n    <Navbar appearance=\"subtle\" className=\"nav-toggle\">\n      <Navbar.Body>\n        <Nav>\n          <Dropdown\n            placement=\"topStart\"\n            trigger=\"click\"\n            renderTitle={children => {\n              return <Icon style={iconStyles} icon=\"cog\" />;\n            }}\n          >\n            <Dropdown.Item>Help</Dropdown.Item>\n            <Dropdown.Item>Settings</Dropdown.Item>\n            <Dropdown.Item>Sign out</Dropdown.Item>\n          </Dropdown>\n        </Nav>\n\n        <Nav pullRight>\n          <Nav.Item onClick={onChange} style={{ width: 56, textAlign: 'center' }}>\n            <Icon icon={expand ? 'angle-left' : 'angle-right'} />\n          </Nav.Item>\n        </Nav>\n      </Navbar.Body>\n    </Navbar>\n  );\n};\n\nclass Side extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expand: true\n    };\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  handleToggle() {\n    this.setState({\n      expand: !this.state.expand\n    });\n  }\n  render() {\n    const { expand } = this.state;\n    return (\n      <div className=\"show-fake-browser sidebar-page\">\n        <Container>\n          <Sidebar\n            style={{ display: 'flex', flexDirection: 'column' }}\n            width={expand ? 260 : 56}\n            collapsible\n          >\n            <Sidenav.Header>\n              <div style={headerStyles}>\n                <Icon icon=\"logo-analytics\" size=\"lg\" style={{ verticalAlign: 0 }} />\n                <span style={{ marginLeft: 12 }}> BRAND</span>\n              </div>\n            </Sidenav.Header>\n            <Sidenav\n              expanded={expand}\n              defaultOpenKeys={['3']}\n              appearance=\"subtle\"\n            >\n              <Sidenav.Body>\n                <Nav>\n                  <Nav.Item eventKey=\"1\" active icon={<Icon icon=\"dashboard\" />}>\n                    Dashboard\n                  </Nav.Item>\n                  <Nav.Item eventKey=\"2\" icon={<Icon icon=\"group\" />}>\n                    User Group\n                  </Nav.Item>\n                  <Dropdown\n                    eventKey=\"3\"\n                    trigger=\"hover\"\n                    title=\"Advanced\"\n                    icon={<Icon icon=\"magic\" />}\n                    placement=\"rightStart\"\n                  >\n                    <Dropdown.Item eventKey=\"3-1\">Geo</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"3-2\">Devices</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"3-3\">Brand</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"3-4\">Loyalty</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"3-5\">Visit Depth</Dropdown.Item>\n                  </Dropdown>\n                  <Dropdown\n                    eventKey=\"4\"\n                    trigger=\"hover\"\n                    title=\"Settings\"\n                    icon={<Icon icon=\"gear-circle\" />}\n                    placement=\"rightStart\"\n                  >\n                    <Dropdown.Item eventKey=\"4-1\">Applications</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"4-2\">Websites</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"4-3\">Channels</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"4-4\">Tags</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"4-5\">Versions</Dropdown.Item>\n                  </Dropdown>\n                </Nav>\n              </Sidenav.Body>\n            </Sidenav>\n            <NavToggle expand={expand} onChange={this.handleToggle} />\n          </Sidebar>\n\n          <Container>\n            <Header>\n              <h2>Page Title</h2>\n            </Header>\n            <Content>Content</Content>\n          </Container>\n        </Container>\n      </div>\n    );\n  }\n}\n\n//ReactDOM.render(<Page />); \n\nexport default Side;","import React, {Component} from 'react';\n//import logo from './logo.svg';\nimport './App.css'; \nimport Side from './components/SideLayout';\n\nimport 'rsuite/dist/styles/rsuite-default.css';\n//import { Button } from 'rsuite';  \nimport { Container, Header, Content, Footer, Sidebar } from 'rsuite';\n\nclass App extends Component{ \n    render(){\n        return( \n            <Side /> \n\n        );\n\n    }\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}